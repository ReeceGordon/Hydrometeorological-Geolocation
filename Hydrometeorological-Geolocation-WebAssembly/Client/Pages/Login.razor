@inject HttpClient Http
@inject TokenAuthenticationStateProvider AuthStateProvider
@using Hydrometeorological_Geolocation_Prototype_V2.Shared
@using Hydrometeorological_Geolocation_Prototype_V2.Client.AuthenticationStateProviders

<div class="container col-6">
    @if (loginFailure)
    {
        <div class="alert alert-danger">Your credentials did not work. Please try again.</div>
    }
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Login</h5>
            <EditForm @ref="loginform" Model="credentials" OnValidSubmit="SubmitCredentials">
                <DataAnnotationsValidator />

                <div class="form-group">
                    >
                    <label>Email address</label>
                    <InputText class="form-control" @bind-Value="credentials.Email" />
                    <ValidationMessage For="@(()=> credentials.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText type="password" class="form-control" @bind-Value="credentials.Password" />
                    <ValidationMessage For="@(()=> credentials.Password)" />
                    <div />
                    <button type="submit" class="btn btn-outline-primary btn-sm">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    Credentials credentials = new Credentials();
    bool loginFailure;

    EditForm loginform { get; set; }

    /// <summary>
    /// Posts respective login data to the loginController for management so long as it isn't null
    /// </summary>
    async Task SubmitCredentials()
    {
        var result = await Http.PostJsonAsync<LoginResult>("api/login", credentials);
        loginFailure = result.Token == null;
        if (!loginFailure)
        {
            await AuthStateProvider.SetTokenAsync(result.Token, result.Expiry);
        }
    }
}